作用域基础


作用域是一套规则，用于确定在何处以及如何查找变量（标识符）。如果查找的目的是对变量进行赋值，那么就会使用LHS查询；如果目的是获取变量的值，就会
使用RHS查询。

词法作用域意味着作用域是由书写代码时函数声明的位置来决定的。编译的词法分析阶段基本能够知道全部标识符在哪里以及是如何声明的，从而能够预测在执
过程中如何对它们进行查找。JavaScript中有两个机制可以“欺骗”词法作用域：eval(..)和with。会导致性能问题。不要使用它们。


函数是JavaScript中最常见的作用域单元。块作用域指的是变量和函数不仅可以属于所处的作用域，也可以属于某个代码块（通常指{..}内部）。从ES3开始，try/catch结构
catch分句中具有块作用域。在ES6中引入了let关键字，用来在任意代码块中声明变量。所声明的变量只在块级作用域有效

不成功的RHS引用会导致抛出ReferenceError异常。不成功的LHS引用会导致自动隐式地创建一个全局变量（非严格模式下），该变量使用LHS引用的目标作为标识符，或者抛出ReferenceError异常
严格模式下）


提升相关

我们习惯将vara=2;看作一个声明，而实际上JavaScript引擎并不这么认为。它将vara和a=2当作两个单独的声明，第一个是编译阶段的任务，而第二个则是执行
段的任务。这意味着无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。可以将这个过程形象地想象成所有的声明（变量和函数）都
被“移动”到各自作用域的最顶端，这个过程被称为提升。声明本身会被提升，而包括函数表达式的赋值在内的赋值操作并不会提升。要注意避免重复声明，特别
当普通的var声明和函数声明混合在一起的时候，否则会引起很多危险的问题！


闭包相关
当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。
闭包未释放会导致内存泄漏。
//闭包还不是很懂
